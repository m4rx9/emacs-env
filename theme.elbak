
;; this one is on the theme itself

;(set-face-attributes 'header nil :background color)
;(setq header-line-format " ")
;(set-frame-parameter nil 'internal-border-width 10)

;; @THEME --------------------------------------------------------------------
;(setq header-line-format " ")
;(toggle-frame-fullscreen)
; Set cursor color to white
(face-remap-add-relative 'default :family "Monaco" :height 200)




;(load-file "~/.emacs.d/plugins/zen-mode/zen-mode.el")
;(require 'zen-mode)


;;
;(require 'smooth-scrolling)
;(smooth-scrolling-mode 1)
;(setq smooth-scroll-margin 5)


(require 'hipster-theme) ;; should be before powerline, otherwise it seems that it overwrites powerline
;; http://stackoverflow.com/questions/4821984/emacs-osx-default-font-setting-does-not-persist

;                    :box nil)

;;https://stackoverflow.com/questions/4532024/different-color-themes-per-mode-in-emacs?rq=1

;(face-remap-add-relative 'default :family "Monaco" :height 160)
;(set-face-attribute 'default nil :font "Monaco 18")

(defun w ()
  (interactive)
  ;(focus-mode)
  (face-remap-add-relative 'default :family "Monaco" :height 160)
  ;(set-face-attribute 'default nil :font "Monaco 18")
  ;(set-face-attribute 'default nil :font "Monaco 12")
  )

(defun wh ()
  (interactive)
  ;(focus-mode)
  (face-remap-add-relative 'default :family "Helvetica" :height 160)
  ;(set-face-attribute 'default nil :font "Monaco 18")
  ;(set-face-attribute 'default nil :font "Monaco 12")
  )

(defun wh12 ()

  (interactive)
  ;(focus-mode)
  (face-remap-add-relative 'default :family "Helvetica" :height 120)
  ;(set-face-attribute 'default nil :font "Monaco 18")
  ;(set-face-attribute 'default nil :font "Monaco 12")
  )


(defun w0 ()
  (interactive)
  ;(focus-mode)
  (face-remap-add-relative 'default :family "Monaco" :height 120)
  ;(set-face-attribute 'default nil :font "Monaco 12")
  )

(defun w12 ()
  (interactive)
  ;(focus-mode)
  (face-remap-add-relative 'default :family "Monaco" :height 180)
  ;(set-face-attribute 'default nil :font "Monaco 12")
  )

(defun ww ()
       (interactive)
         (let ((color-theme-is-global nil))
	   (iimage-mode)
           (face-remap-add-relative 'default :family "Monaco" :height 160)
	   (load-theme-buffer-local 'github (current-buffer))
	   )
           (set-cursor-color "#000")
           )

(defun wx ()
       (interactive)
         (let ((color-theme-is-global nil))
	   (iimage-mode)
           (set-cursor-color "#000")
           (face-remap-add-relative 'default :family "Helvetica Neue" :height 150)
           (set-cursor-color "#000")
           ;(set-frame-font
            ;"-outline-Helvetica Neue-normal-normal-normal-mono-14-*-*-*-c-*-iso8859-1")
                                        ;   (load-theme-buffer-local 'whiteboard (current-buffer))
	   (load-theme-buffer-local 'github (current-buffer))
	   )
           (set-cursor-color "#000")
           )

;(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

;; @darkroom
(defun dm ()
	"Make things simple-looking by removing decoration
	 and choosing a simple theme."
        (interactive)
        ;(switch-full-screen 1)     ;; requires above function
	;(color-theme-retro-green)  ;; requires color-theme
        (setq left-margin 10)
        (menu-bar-mode -1)
        (tool-bar-mode -1)
        (scroll-bar-mode -1)
        (set-face-foreground 'mode-line "gray15")
        (set-face-background 'mode-line "black")
        (auto-fill-mode 1))


;;;;;;; https://www.masteringemacs.org/article/hiding-replacing-modeline-strings
(defvar mode-line-cleaner-alist
  `((auto-complete-mode . " α")
    (yas/minor-mode . " υ")
    (paredit-mode . " π")
    (eldoc-mode . "")
    (abbrev-mode . "")
    ;; Major modes
    (lisp-interaction-mode . "λ")
    (hi-lock-mode . "")
    (Projectile . "P")
    (emacs-lisp-mode . "EL")
    (nxhtml-mode . "nx"))
  "Alist for `clean-mode-line'.

When you add a new element to the alist, keep in mind that you
must pass the correct minor/major mode symbol and a string you
want to use in the modeline *in lieu of* the original.")


(defun clean-mode-line ()
  (interactive)
  (loop for cleaner in mode-line-cleaner-alist
        do (let* ((mode (car cleaner))
                 (mode-str (cdr cleaner))
                 (old-mode-str (cdr (assq mode minor-mode-alist))))
             (when old-mode-str
                 (setcar old-mode-str mode-str))
               ;; major mode
             (when (eq mode major-mode)
               (setq mode-name mode-str)))))


(add-hook 'after-change-major-mode-hook 'clean-mode-line)
          





(provide 'theme.el)
